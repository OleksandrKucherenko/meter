// Library: meter, Android Micro Benchmarking

buildscript {
    repositories {
        jcenter()
//        mavenLocal()
//        mavenCentral()
        /* ATTACH CUSTOM BUILDS OF GRADLE PLUGINS FROM '~/gradle/plugins' folder */
//        flatDir { dirs rootProject.projectDir.toString() + '/gradle/plugins' }
    }
    dependencies {
        /* Android Build Plugin */
        classpath "com.android.tools.build:gradle:${gradlePluginVersion}"
        /* coveralls.io: https://github.com/kt3k/coveralls-gradle-plugin */
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${CoverallsVersion}"
        /* bintray.com: https://github.com/bintray/gradle-bintray-plugin */
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:+'
        /* Allows project artifacts to be deployed to a Maven repository, or installed to the local Maven cache. */
        classpath 'com.github.dcendents:android-maven-plugin:+'
    }
}

// CONFIGURATION based on: http://tools.android.com/tech-docs/new-build-system/user-guide

apply plugin: 'com.android.library'
apply from: "${rootProject.rootDir}/gradle/config/quality.gradle"

/* DEFINE REPOSITORY WITH LATEST ROBOLECTRIC VERSION */
repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    /* [ DEBUG/RELEASE ] ============================================================================================ */
    compile fileTree(dir: 'libs', includes: ['*.jar'])

    /* [ UNIT TESTING ] ============================================================================================= */
    if (useTesting) {
        /* Android Tests -------------------------------------------------------------------------------------------- */
        // unit tests libs. Rule: repeated Libs should be excluded.
        androidTestCompile fileTree(dir: 'src/tests/libs', include: '*.jar')

        /* UNIT TESTS HAS DEPENDENCY ON SUPPORT LIB, SO INCLUDE IT MANUALLY FOR CONTROLLING THE VERSION OF IT */
        androidTestCompile "com.android.support:support-v4:${androidSupportLib}"

        /* Hamcrest (v1.4) */
        androidTestCompile 'org.hamcrest:hamcrest-integration:+',
                'org.hamcrest:hamcrest-core:+',
                'org.hamcrest:hamcrest-library:+'

        /* Mockito (v2.0.2-beta) */
        androidTestCompile 'org.mockito:mockito-core:+',
                'com.google.dexmaker:dexmaker-mockito:+'

        /* jUnit (v4.12) */
        androidTestCompile('junit:junit:4.12') { exclude group: 'org.hamcrest' }

        /* JVM Tests ------------------------------------------------------------------------------------------------ */
        testCompile 'org.hamcrest:hamcrest-integration:+',
                'org.hamcrest:hamcrest-core:+',
                'org.hamcrest:hamcrest-library:+'
        testCompile 'org.mockito:mockito-core:+',
                'com.google.dexmaker:dexmaker-mockito:+'
        testCompile('junit:junit:4.12') { exclude group: 'org.hamcrest' }
    }
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    // Android Manifest generation options
    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        /*useJack true*/

        versionCode 1
        versionName "1.0"

        if (useTesting) {
            /* default unit testing runner */
            testInstrumentationRunner "android.test.InstrumentationTestRunner"
        }
    }

    /* be specific about JaCoCo version. */
    jacoco {
        version JaCoCoVersion
    }

    buildTypes {
        debug {
            testCoverageEnabled useJacoco
//            debuggable true
//            jniDebuggable true
            shrinkResources false /* incompatible with useJack !!! */
        }
        release {
            minifyEnabled false
            shrinkResources false /* incompatible with useJack !!! */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        test {
            // include library sources into tests
            java.srcDirs = ['src/test/java', 'src/main/java']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    /* EXCLUDE SOME UNNEEDED FILES FROM PACKAGE */
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude '.readme'
        exclude '.README'
    }

    /* Adjust library output naming */
    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile

            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def name = variant.buildType.name
                def fileName = "${LIBRARY_ARTIFACT}-${version}-${name}.aar"
                output.outputFile = new File(outputFile.parent, fileName)

                // dump into logs final filename
                def log = "Library variant.outputs output file name: '${fileName}'"
                rootProject.logger.lifecycle(log)
            }
        }
    }

    /* https://sites.google.com/a/android.com/tools/tech-docs/unit-testing-support */
    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        disable 'GradleDynamicVersion'
    }
}

/* [ UNIT Test Results ] ============================================================================================ */

afterEvaluate {
    /* Adjust Mockable Android task  */
    tasks.matching { it.name.startsWith('mockableAndroidJar') }.each { mock ->
        // http://goo.gl/wXhBIF --> MockableJarGenerator.java
        mock.finalizedBy patchMockableAndroidJar
    }
}

/* Create a copy of original mockable Jar */
task copyMockableAndroidJar(type: Copy) {
    description = 'Create backup copy of mockable-android-${api}.jar file'
    group = 'Unit Testing'

    from "${project.buildDir}/intermediates/mockable-android-${androidTargetSdkVersion}.jar"
    into "${project.buildDir}/intermediates/"

    rename { String fileName ->
        fileName.replace("mockable-android-${androidTargetSdkVersion}.jar",
                "mockable-android-${androidTargetSdkVersion}-original.jar")
    }
}

/* Exclude classes that we want to replace by own implementation  */
task patchMockableAndroidJar(type: Zip, dependsOn: copyMockableAndroidJar) {
    description = 'patch mockable-android-${api}.jar by own classes'
    group = 'Unit Testing'

    // set archive name and destination
    entryCompression = ZipEntryCompression.STORED  // speedup task by excluding compression
    destinationDir = file("${project.buildDir}/intermediates")
    archiveName = "mockable-android-${androidTargetSdkVersion}.jar"
    def source = "${project.buildDir}/intermediates/mockable-android-${androidTargetSdkVersion}-original.jar"

    // exclude from Mocks Jar classes which we replace by own implementation
    from(zipTree(source)) {
        exclude '**/android/util/SparseArray.class'
    }
}

/* [ COVERALLS ] ==================================================================================================== */

if (useJacoco) {
    /* http://raptordigital.blogspot.se/2014/08/code-coverage-reports-using-robolectric.html */
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    /* be specific about JaCoCo version. */
    jacoco {
        version JaCoCoVersion
        //destinationFile = file("${project.buildDir}/jacoco/jacoco.exec")
    }


    coveralls.jacocoReportPath = "${project.buildDir}/outputs/reports/jacoco/jacoco.xml"

    tasks.coveralls.dependsOn 'jacocoResults'
}

/* [ ARTIFACTS ] ==================================================================================================== */

// set output binary version. format: {versionName}.{versionCode}.{gitRevision}
version = android.defaultConfig.versionName + "." + android.defaultConfig.versionCode + ".${GIT_REVISION}"
group = LIBRARY_GROUP /* com.artfulbits */

/* MAVEN REPOSITORY PUBLISHING */
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

/* https://github.com/bintray/bintray-examples/blob/master/gradle-aar-example/build.gradle */
bintray {
    /* Set to False for making publishing a real thing. */
    dryRun = PUBLISHING_DRY_RUN

    //apiUrl = "https://api.bintray.net"
    user = USER_NAME
    key = BINTRAY_API_KEY
    configurations = ['archives']

    /*
      curl -T <FILE.EXT> -ukucherenko-alex:<API_KEY>
        https://api.bintray.com/content/kucherenko-alex/android/<UR_COOL_PACKAGE_NAME>/<VERSION_NAME>/<FILE_TARGET_PATH>
    */
    pkg {
        repo = 'android' /* Hardcoded!!! Create repository first in Bintray Admin UI! */
        name = "${LIBRARY_GROUP}:${LIBRARY_ARTIFACT}" /* com.artfulbits:meter */
        desc = LIBRARY_DESC

        websiteUrl = LIBRARY_URL
        issueTrackerUrl = "${LIBRARY_URL}/issues"
        vcsUrl = LIBRARY_GIT

        licenses = ['Apache-2.0']
        labels = ['aar', 'android', 'microbenchmark', 'benchmark']

        publicDownloadNumbers = true
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging "${LIBRARY_PKG}"
                name LIBRARY_NAME
                description LIBRARY_DESC
                url LIBRARY_URL
                artifactId LIBRARY_ARTIFACT

                /* Publishing License */
                licenses {
                    license {
                        name LIBRARY_LIC
                        url LIBRARY_LIC_URL
                        distribution 'repo'
                    }
                }
                /* Developers of the library */
                developers {
                    developer {
                        id USER_NAME
                        name USER_FULL
                        email USER_EMAIL
                    }
                }
                /* Source Code Management Info */
                scm {
                    url "scm:${LIBRARY_GIT}"
                    connection "scm:${LIBRARY_GIT}"
                    developerConnection "scm:${LIBRARY_GIT}"
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    //classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    /* The Java plug-in introduces six configurations: archives, default, compile, runtime, testCompile, testRuntime */
    archives javadocJar
    archives sourcesJar
}
